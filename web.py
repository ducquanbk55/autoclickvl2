#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Sep 09, 2020 11:27:54 AM +07  platform: Windows NT

import sys
import cv2 as cv
import pyautogui as scr
import threading
from PIL import Image, ImageTk
from pylab import *
import numpy as np
import os

from findfile import qFind
from qmike_opencv import qcv2
from qdice import dice


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import taixiu_Interface_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    taixiu_Interface_support.set_Tk_var()
    top = Toplevel1 (root)
    
    taixiu_Interface_support.init(root, top)
    threading._start_new_thread(mainload,(top, ))


    
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    taixiu_Interface_support.set_Tk_var()
    top = Toplevel1 (w)
    taixiu_Interface_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        # top.geometry("381x450+869+150")
        # dimension =  str(top.geometry())
        # _, x, y = dimension.split('+')
        w, h = root.winfo_screenwidth(), root.winfo_screenheight()
        x = w - 409
        y = 200


        
        top.geometry('%dx%d+%d+%d' % (381, 600 , x,y))

        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1, 1)
        top.title("Mike Predict by Bayes")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        
        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.604, rely=0.022, height=21, width=33)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''X''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.604, rely=0.067, height=21, width=34)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Y''')

        self.txtX = tk.Entry(top)
        self.txtX.place(relx=0.787, rely=0.022,height=20, relwidth=0.168)
        self.txtX.configure(background="white")
        self.txtX.configure(disabledforeground="#a3a3a3")
        self.txtX.configure(font="TkFixedFont")
        self.txtX.configure(foreground="#000000")
        self.txtX.configure(highlightbackground="#d9d9d9")
        self.txtX.configure(highlightcolor="black")
        self.txtX.configure(insertbackground="black")
        self.txtX.configure(selectbackground="blue")
        self.txtX.configure(selectforeground="white")

        self.txtY = tk.Entry(top)
        self.txtY.place(relx=0.787, rely=0.067,height=20, relwidth=0.168)
        self.txtY.configure(background="white")
        self.txtY.configure(disabledforeground="#a3a3a3")
        self.txtY.configure(font="TkFixedFont")
        self.txtY.configure(foreground="#000000")
        self.txtY.configure(highlightbackground="#d9d9d9")
        self.txtY.configure(highlightcolor="black")
        self.txtY.configure(insertbackground="black")
        self.txtY.configure(selectbackground="blue")
        self.txtY.configure(selectforeground="white")

        self.txtWidth = tk.Entry(top)
        self.txtWidth.place(relx=0.787, rely=0.111,height=20, relwidth=0.168)
        self.txtWidth.configure(background="white")
        self.txtWidth.configure(disabledforeground="#a3a3a3")
        self.txtWidth.configure(font="TkFixedFont")
        self.txtWidth.configure(foreground="#000000")
        self.txtWidth.configure(highlightbackground="#d9d9d9")
        self.txtWidth.configure(highlightcolor="black")
        self.txtWidth.configure(insertbackground="black")
        self.txtWidth.configure(selectbackground="blue")
        self.txtWidth.configure(selectforeground="white")

        self.txtHeight = tk.Entry(top)
        self.txtHeight.place(relx=0.787, rely=0.156,height=20, relwidth=0.168)
        self.txtHeight.configure(background="white")
        self.txtHeight.configure(disabledforeground="#a3a3a3")
        self.txtHeight.configure(font="TkFixedFont")
        self.txtHeight.configure(foreground="#000000")
        self.txtHeight.configure(highlightbackground="#d9d9d9")
        self.txtHeight.configure(highlightcolor="black")
        self.txtHeight.configure(insertbackground="black")
        self.txtHeight.configure(selectbackground="blue")
        self.txtHeight.configure(selectforeground="white")

        self.Label2_3 = tk.Label(top)
        self.Label2_3.place(relx=0.604, rely=0.111, height=21, width=34)
        self.Label2_3.configure(activebackground="#f9f9f9")
        self.Label2_3.configure(activeforeground="black")
        self.Label2_3.configure(background="#d9d9d9")
        self.Label2_3.configure(disabledforeground="#a3a3a3")
        self.Label2_3.configure(foreground="#000000")
        self.Label2_3.configure(highlightbackground="#d9d9d9")
        self.Label2_3.configure(highlightcolor="black")
        self.Label2_3.configure(text='''Width''')

        self.Label2_4 = tk.Label(top)
        self.Label2_4.place(relx=0.604, rely=0.156, height=21, width=34)
        self.Label2_4.configure(activebackground="#f9f9f9")
        self.Label2_4.configure(activeforeground="black")
        self.Label2_4.configure(background="#d9d9d9")
        self.Label2_4.configure(disabledforeground="#a3a3a3")
        self.Label2_4.configure(foreground="#000000")
        self.Label2_4.configure(highlightbackground="#d9d9d9")
        self.Label2_4.configure(highlightcolor="black")
        self.Label2_4.configure(text='''Height''')

        self.btnstart = tk.Button(top)
        self.btnstart.place(relx=0.63, rely=0.222, height=54, width=127)
        self.btnstart.configure(activebackground="#008000")
        self.btnstart.configure(activeforeground="white")
        self.btnstart.configure(activeforeground="#ffffff")
        self.btnstart.configure(background="#008080")
        self.btnstart.configure(disabledforeground="#a3a3a3")
        self.btnstart.configure(font="-family {Segoe UI} -size 18 -weight normal -slant roman -underline 0 -overstrike 0")
        self.btnstart.configure(foreground="#ffffff")
        self.btnstart.configure(highlightbackground="#d9d9d9")
        self.btnstart.configure(highlightcolor="black")
        self.btnstart.configure(pady="0")
        self.btnstart.configure(text='''Start''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.052, rely=0.644, height=21, width=113)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 12 -weight normal -slant roman -underline 0 -overstrike 0")
        self.Label3.configure(foreground="#0000ff")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''1.Ket qua hien tai''')

        self.lbxscurrent1 = tk.Label(top)
        self.lbxscurrent1.place(relx=0.131, rely=0.689, height=21, width=25)
        self.lbxscurrent1.configure(activebackground="#f9f9f9")
        self.lbxscurrent1.configure(activeforeground="black")
        self.lbxscurrent1.configure(background="#d9d9d9")
        self.lbxscurrent1.configure(disabledforeground="#a3a3a3")
        self.lbxscurrent1.configure(foreground="#000000")
        self.lbxscurrent1.configure(highlightbackground="#d9d9d9")
        self.lbxscurrent1.configure(highlightcolor="black")
        self.lbxscurrent1.configure(text='''XS1''')

        self.lbxscurrent2 = tk.Label(top)
        self.lbxscurrent2.place(relx=0.21, rely=0.689, height=21, width=64)
        self.lbxscurrent2.configure(activebackground="#f9f9f9")
        self.lbxscurrent2.configure(activeforeground="black")
        self.lbxscurrent2.configure(background="#d9d9d9")
        self.lbxscurrent2.configure(disabledforeground="#a3a3a3")
        self.lbxscurrent2.configure(foreground="#000000")
        self.lbxscurrent2.configure(highlightbackground="#d9d9d9")
        self.lbxscurrent2.configure(highlightcolor="black")
        self.lbxscurrent2.configure(text='''XS2''')

        self.lbxscurrent3 = tk.Label(top)
        self.lbxscurrent3.place(relx=0.315, rely=0.689, height=21, width=64)
        self.lbxscurrent3.configure(activebackground="#f9f9f9")
        self.lbxscurrent3.configure(activeforeground="black")
        self.lbxscurrent3.configure(background="#d9d9d9")
        self.lbxscurrent3.configure(disabledforeground="#a3a3a3")
        self.lbxscurrent3.configure(foreground="#000000")
        self.lbxscurrent3.configure(highlightbackground="#d9d9d9")
        self.lbxscurrent3.configure(highlightcolor="black")
        self.lbxscurrent3.configure(text='''XS3''')

        self.Label2_1 = tk.Label(top)
        self.Label2_1.place(relx=0.052, rely=0.8, height=30, width=124)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(background="#d9d9d9")
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(font="-family {Segoe UI} -size 12 -weight normal -slant roman -underline 0 -overstrike 0")
        self.Label2_1.configure(foreground="#0000ff")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(text='''2.Dự đoán kế tiếp''')

        self.spin_current1 = tk.Spinbox(top, from_=1.0, to=6.0)
        self.spin_current1.place(relx=0.105, rely=0.733, relheight=0.042
                , relwidth=0.092)
        self.spin_current1.configure(activebackground="#f9f9f9")
        self.spin_current1.configure(background="white")
        self.spin_current1.configure(buttonbackground="#d9d9d9")
        self.spin_current1.configure(disabledforeground="#a3a3a3")
        self.spin_current1.configure(font="TkDefaultFont")
        self.spin_current1.configure(foreground="black")
        self.spin_current1.configure(highlightbackground="black")
        self.spin_current1.configure(highlightcolor="black")
        self.spin_current1.configure(insertbackground="black")
        self.spin_current1.configure(selectbackground="blue")
        self.spin_current1.configure(selectforeground="white")
        self.spin_current1.configure(textvariable=taixiu_Interface_support.spinbox)

        self.spin_current2 = tk.Spinbox(top, from_=1.0, to=6.0)
        self.spin_current2.place(relx=0.236, rely=0.733, relheight=0.042
                , relwidth=0.092)
        self.spin_current2.configure(activebackground="#f9f9f9")
        self.spin_current2.configure(background="white")
        self.spin_current2.configure(buttonbackground="#d9d9d9")
        self.spin_current2.configure(disabledforeground="#a3a3a3")
        self.spin_current2.configure(font="TkDefaultFont")
        self.spin_current2.configure(foreground="black")
        self.spin_current2.configure(highlightbackground="black")
        self.spin_current2.configure(highlightcolor="black")
        self.spin_current2.configure(insertbackground="black")
        self.spin_current2.configure(selectbackground="blue")
        self.spin_current2.configure(selectforeground="white")
        self.spin_current2.configure(textvariable=taixiu_Interface_support.spinbox)

        self.spin_current3 = tk.Spinbox(top, from_=1.0, to=6.0)
        self.spin_current3.place(relx=0.367, rely=0.733, relheight=0.042
                , relwidth=0.092)
        self.spin_current3.configure(activebackground="#f9f9f9")
        self.spin_current3.configure(background="white")
        self.spin_current3.configure(buttonbackground="#d9d9d9")
        self.spin_current3.configure(disabledforeground="#a3a3a3")
        self.spin_current3.configure(font="TkDefaultFont")
        self.spin_current3.configure(foreground="black")
        self.spin_current3.configure(highlightbackground="black")
        self.spin_current3.configure(highlightcolor="black")
        self.spin_current3.configure(insertbackground="black")
        self.spin_current3.configure(selectbackground="blue")
        self.spin_current3.configure(selectforeground="white")
        self.spin_current3.configure(textvariable=taixiu_Interface_support.spinbox)

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.052, rely=0.489,height=20, relwidth=0.535)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="blue")
        self.Entry1.configure(selectforeground="white")

        self.lbimageUp = tk.Label(top)
        self.lbimageUp.place(relx=0.157, rely=0.873, height=35, width=35)
        self.lbimageUp.configure(activebackground="#f9f9f9")
        self.lbimageUp.configure(activeforeground="black")
        self.lbimageUp.configure(background="#d9d9d9")
        self.lbimageUp.configure(disabledforeground="#a3a3a3")
        self.lbimageUp.configure(foreground="#000000")
        self.lbimageUp.configure(highlightbackground="#d9d9d9")
        self.lbimageUp.configure(highlightcolor="black")
        self.lbimageUp.configure(text='''Label''')

        self.lbimageDown = tk.Label(top)
        self.lbimageDown.place(relx=0.525, rely=0.867, height=35, width=35)
        self.lbimageDown.configure(activebackground="#f9f9f9")
        self.lbimageDown.configure(activeforeground="black")
        self.lbimageDown.configure(background="#d9d9d9")
        self.lbimageDown.configure(disabledforeground="#a3a3a3")
        self.lbimageDown.configure(foreground="#000000")
        self.lbimageDown.configure(highlightbackground="#d9d9d9")
        self.lbimageDown.configure(highlightcolor="black")
        self.lbimageDown.configure(text='''Label''')

        self.lbPercentDic_Tai = tk.Label(top)
        self.lbPercentDic_Tai.place(relx=0.315, rely=0.889, height=21, width=34)
        self.lbPercentDic_Tai.configure(activebackground="#f9f9f9")
        self.lbPercentDic_Tai.configure(activeforeground="black")
        self.lbPercentDic_Tai.configure(background="#d9d9d9")
        self.lbPercentDic_Tai.configure(disabledforeground="#a3a3a3")
        self.lbPercentDic_Tai.configure(foreground="#000000")
        self.lbPercentDic_Tai.configure(highlightbackground="#d9d9d9")
        self.lbPercentDic_Tai.configure(highlightcolor="black")
        self.lbPercentDic_Tai.configure(text='''Label''')

        self.lbPercentDic_Xiu = tk.Label(top)
        self.lbPercentDic_Xiu.place(relx=0.682, rely=0.889, height=21, width=34)
        self.lbPercentDic_Xiu.configure(activebackground="#f9f9f9")
        self.lbPercentDic_Xiu.configure(activeforeground="black")
        self.lbPercentDic_Xiu.configure(background="#d9d9d9")
        self.lbPercentDic_Xiu.configure(disabledforeground="#a3a3a3")
        self.lbPercentDic_Xiu.configure(foreground="#000000")
        self.lbPercentDic_Xiu.configure(highlightbackground="#d9d9d9")
        self.lbPercentDic_Xiu.configure(highlightcolor="black")
        self.lbPercentDic_Xiu.configure(text='''Label''')

        self.frmImage = tk.Label(top)
        self.frmImage.place(relx=0.052, rely=0.044, height=171, width=194)
        self.frmImage.configure(activebackground="#f9f9f9")
        self.frmImage.configure(activeforeground="black")
        self.frmImage.configure(background="#84c1ff")
        self.frmImage.configure(disabledforeground="#a3a3a3")
        self.frmImage.configure(foreground="#000000")
        self.frmImage.configure(highlightbackground="#d9d9d9")
        self.frmImage.configure(highlightcolor="black")

        self.varX = tk.IntVar()
        self.varY = tk.IntVar()
        self.scrollx = ttk.Scale(top, from_=0, to=1204, variable = self.varX)
        self.scrollx.place(relx=0.026, rely=0.378, relwidth=0.499, relheight=0.0 , height=26, bordermode='ignore')
        self.scrollx.configure(takefocus="")
        self.scrollx.configure(cursor="fleur")

        self.scrolly = ttk.Scale(top, from_=0, to=1080, variable = self.varY)
        self.scrolly.place(relx=0.551, rely=0.022, relwidth=0.0, relheight=0.333 , width=26, bordermode='ignore')
        self.scrolly.configure(orient="vertical")
        self.scrolly.configure(takefocus="")
        self.scrolly.configure(cursor="fleur")


#change and find dices
sample = []
meaning = []
mydices =[]
#load_the_sample()

offset = 10
dices = []
dices_filter = []
circles =[]
circles_filter =[]
dice_numb = [0,0,0]
dice_numb2 = [0,0,0]
previous=[6,6,6]


def filter(input_rect):
    global offset
    x, y, w, h = input_rect
    existing = False
    for rect in dices_filter:
        x1, y1, w1, h1 = rect
        if x1 == x and y == y1 and w1 == w and h1 == h:
            existing = True
            break
        if (x1 <= x+offset and x1 > x-offset) and (y1 <= y+offset and y1 > y-offset) and (w1 <= w+offset and w1 > w-offset) and (h1 <= h+offset and h1 > h-offset):
            existing = True
            break

    if not existing:
        dices_filter.append(input_rect)

def timer1_tick():
    sleep(6.0)
    global previous
    global enable_start
    print(previous)
    print('wrote')
#     insertDB(previous)
    file_record = open('log.csv', 'a')
    file_record.write(str(datetime.now())+', '+str(previous[0])+','+str(previous[1])+','+str(previous[2])+'\n')
    file_record.close()
    enable_start = True

def mainload(top = None):
    f = open('config.txt', 'r')
    all = f.read().split(',')
    top.txtX.insert(0, all[0])
    top.txtY.insert(0, all[1])
    top.txtWidth.insert(0, all[2])
    top.txtHeight.insert(0, all[3])
    x = 0
    y = 0
    while 1:
        dices = []
        dices_filter = []
        circles =[]
        circles_filter =[]
        dice_numb = [0,0,0]

        top.txtX.delete(0, tk.END)
        top.txtY.delete(0, tk.END)
        
        top.txtX.insert(tk.END, str(x))
        top.txtY.insert(tk.END, str(y))

        screen = scr.screenshot()

        if x != top.varX.get() or y != top.varY.get():
            x = top.varX.get()
            y = top.varY.get()
        try:
            w, h =  int(top.txtWidth.get()), int(top.txtHeight.get())
            w, h = x + w, y+ h            
        except:
            x, y, w, h = 0,0, 300, 300
        bound = (x, y, w, h)
        screen = screen.crop(bound)
        img = screen
        region = screen
        origin = region
        
        img = region.rotate(45)
        newimg = array(img)
        
        rects, contours = qcv2.detectRectangle(newimg)
        rects = sorted(rects,key=lambda  x:x[0],reverse=True) 
        
        avgx = 0
        avgy = 0
        sumx = []
        for rect in rects:
            if rect[3]> 35:
                sumx.append(rect[2])
        avgw = average(sumx)
        #print(avgw)
        for rect in rects:
            x,y, w, h = rect
            if w > avgw and h >avgw:
                dices.append(rect)
                filter(rect)

        counter =0
        for rect in circles:# ve hinh vuong
            cv.rectangle(newimg, rect, (0,0, 255),1)
            
        for rect in dices_filter:# ve hinh vuong
            #qcv2.putText(newimg, 'dice '+str(counter), rect[0], rect[1])
            cv.rectangle(newimg, rect, (0,0, 255),1)
            x, y, w, h = rect
            img_dice = newimg[y:y+h, x:x+w]#
            img_dice = qcv2.FilterColor_White(img_dice)
            img_dice = cv.cvtColor(img_dice, cv.COLOR_BGR2GRAY)
            contours,_=cv.findContours(img_dice, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
            point = 0
            for cnt in contours : 
                area = cv.contourArea(cnt) 
                if area >20:
                    point += 1
            
            dice_numb[counter] =  point
            counter +=1

        if dice_numb[0] != 0 and dice_numb[1] !=0 and dice_numb[2] !=0 and dice_numb != previous:
            previous = dice_numb
            if enable_start:
                print('start to writing')
                threading._start_new_thread(timer1_tick, ())
                enable_start = False
                
        newimg = Image.fromarray(newimg)
        img = ImageTk.PhotoImage(image = newimg)
        
        if top != None:
            top.frmImage.configure(image = img)
        else:
            print('Object root to init interface is\'nt configure')

        if cv.waitKey(1) & 0xff == ord('q'):
            break

if __name__ == '__main__':
    vp_start_gui()








